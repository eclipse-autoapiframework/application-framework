{% extends "common/cpp_file_base.jinja" %}
{% import "vaf_interface/macros.jinja" as interface with context %}

{% block includes %}
#include "vaf/internal/data_ptr_helper.h"
{% endblock -%}

{% block content %}
{{ module.Name }}::{{ module.Name }}(vaf::Executor& executor, std::string name, std::vector<std::string> dependencies, vaf::ExecutableControllerInterface& executable_controller_interface)
  : vaf::ControlInterface(std::move(name), std::move(dependencies), executable_controller_interface, executor),
    executor_{vaf::ControlInterface::executor_} {
}

vaf::Result<void> {{ module.Name }}::Init() noexcept {
  return vaf::Result<void>{};
}

void {{ module.Name }}::Start() noexcept {
  ReportOperational();
}

void {{ module.Name }}::Stop() noexcept {
}

void {{ module.Name }}::DeInit() noexcept  {
}

void {{ module.Name }}::StartEventHandlerForModule(const std::string& module) {
  {% for de in module.ModuleInterfaceRef.DataElements %}
  for(auto& handler_container : {{ de.Name }}_handlers_) {
    if(handler_container.owner_ == module) {
      handler_container.is_active_ = true;
    }
  }
  {% endfor %}

  active_modules_.push_back(module);
}

void {{ module.Name }}::StopEventHandlerForModule(const std::string& module) {
  {% for de in module.ModuleInterfaceRef.DataElements %}
  for(auto& handler_container : {{ de.Name }}_handlers_) {
    if(handler_container.owner_ == module) {
      handler_container.is_active_ = false;
    }
  }
  {% endfor %}

  static_cast<void>(std::remove(active_modules_.begin(), active_modules_.end(), module));
}

{% for de in module.ModuleInterfaceRef.DataElements %}
{% set data_type = data_type_to_str(de.TypeRef) %}


{{ interface.consumer_data_element_get_allocated(de, module.Name ) }} {
  return vaf::Result<vaf::ConstDataPtr<const {{ data_type }} >>::FromValue( {{ de.Name }}_sample_);
}

{{ interface.consumer_data_element_get(de, module.Name ) }} { return *{{ de.Name }}_sample_; }

{{ interface.consumer_data_element_handler(de, module.Name ) }} {
  {{ de.Name }}_handlers_.emplace_back(owner, std::move(f));
  if(std::find(active_modules_.begin(), active_modules_.end(), owner) != active_modules_.end()) {
    {{ de.Name }}_handlers_.back().is_active_ = true;
  }
}

{{ interface.provider_data_element_allocate(de, module.Name ) }} {
  std::unique_ptr< {{ data_type }} > ptr{
      std::make_unique< {{ data_type }} >()};
  return ::vaf::Result<vaf::DataPtr< {{ data_type }} >>::FromValue(std::move(ptr));
}

{{ interface.provider_data_element_set_allocated(de, module.Name ) }} {
  {{ de.Name }}_sample_ = vaf::ConstDataPtr<const {{ data_type }}>{std::move(vaf::internal::DataPtrHelper<{{ data_type }}>::getRawPtr(data))};

  for(auto& handler_container : {{ de.Name }}_handlers_) {
    if(handler_container.is_active_) {
      handler_container.handler_({{ de.Name }}_sample_);
    }
  }

  return vaf::Result<void>{};
}

{{ interface.provider_data_element_set(de, module.Name ) }} {
  std::unique_ptr< {{ data_type }} > ptr{
      std::make_unique< {{ data_type }} >(data)};
  {{ de.Name }}_sample_ = vaf::ConstDataPtr<const {{ data_type }}>{std::move(ptr)};

  for(auto& handler_container : {{ de.Name }}_handlers_) {
    if(handler_container.is_active_) {
      handler_container.handler_({{ de.Name }}_sample_);
    }
  }

  return vaf::Result<void>{};
}

{% endfor %}

{% for op in module.ModuleInterfaceRef.Operations %}
{{ interface.provider_operation(op, module.ModuleInterfaceRef, module.Name) }} {
  {{ op.Name }}_handler_ = std::move(f);
}

{{ interface.consumer_operation(op, module.ModuleInterfaceRef, module.Name) }} {
  ::vaf::Promise<{{ operation_get_return_type(op, module.ModuleInterfaceRef) }}> p;

  if({{ op.Name }}_handler_) {
  {% if has_operation_out_or_inout_parameter(op) %}
    p.set_value({{ op.Name }}_handler_({{ interface.operation_expand_in_parameters(op) }}));
  {% else %}
    {{ op.Name }}_handler_({{ interface.operation_expand_in_parameters(op) }});
    p.set_value();
  {% endif %}
  } else {
    vaf::Error error_code{::vaf::ErrorCode::kNoOperationHandlerRegistered, "No operation handler registered for {{ op.Name }}."};
    p.SetError(error_code);
  }

  return p.get_future();
}

{% endfor %}

{% endblock %}
