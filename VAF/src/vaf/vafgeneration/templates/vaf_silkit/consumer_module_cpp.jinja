{% extends "common/cpp_file_base.jinja" %}
{% import "vaf_interface/macros.jinja" as interface with context %}

{% block includes %}
#include <chrono>

#include "vaf/error_domain.h"
#include "protobuf/interface/{{ module.ModuleInterfaceRef.Namespace.replace("::","/").lower()}}/{{module.ModuleInterfaceRef.Name.lower()}}/protobuf_transformer.h"
{% endblock %}

{% block content %}
{{ module.Name }}::{{ module.Name }}(::vaf::Executor& executor, std::string name, ::vaf::ExecutableControllerInterface& executable_controller_interface)
  : ::vaf::ControlInterface(std::move(name), {}, executable_controller_interface, executor),
    executor_{ControlInterface::executor_} {
}

::vaf::Result<void> {{ module.Name }}::Init() noexcept {
  return ::vaf::Result<void>{};
}

void {{ module.Name }}::Start() noexcept {
  const auto registry_uri = "{{registry_uri}}";
  const std::string participant_config_text = R"(
  Description: My participant configuration
  Logging:
      Sinks:
      - Type: Stdout
        Level: Info
  )";
  auto config = SilKit::Config::ParticipantConfigurationFromString(participant_config_text);
  {% set participant_name = add_namespace_to_name(module.Name, module.Namespace) %}
  participant_ = SilKit::CreateParticipant(config, "{{ participant_name }}", registry_uri);

  {% for de in module.ModuleInterfaceRef.DataElements %}
  {% set data_type = data_type_to_str(de.TypeRef) %}
  {% if module.ModuleInterfaceRef.Namespace != "" %}
  {% set de_name = module.ModuleInterfaceRef.Namespace + "::" + de.Name %}
  {% else %}
  {% set de_name = de.Name %}
  {% endif %}
  SilKit::Services::PubSub::PubSubSpec pubsubspec_{{ de_name.replace("::","_") }}{"{{ service_interface_name }}_{{ de.Name }}", SilKit::Util::SerDes::MediaTypeData()};
  pubsubspec_{{ de_name.replace("::","_") }}.AddLabel("Instance", "{{ service_interface_name }}_{{ de.Name }}", SilKit::Services::MatchingLabel::Kind::Mandatory);
  auto receptionHandler_{{ de_name.replace("::","_") }} = [&](auto* subscriber, const auto& dataMessageEvent) {
    const std::lock_guard<std::mutex> lock(cached_{{ de_name.replace("::","_") }}_mutex_);
    SilKit::Util::SerDes::Deserializer deserializer(SilKit::Util::ToStdVector(dataMessageEvent.data));
    std::vector<std::uint8_t> eventData = deserializer.Deserialize<std::vector<uint8_t>>();

    std::unique_ptr< {{ data_type }} > ptr;
    protobuf::interface::{{ module.ModuleInterfaceRef.Namespace }}::{{ module.ModuleInterfaceRef.Name }}::{{ de.Name }}  deserialized;
    deserialized.ParseFromArray( eventData.data(), eventData.size() );
    ptr = std::make_unique< {{ data_type }} >();
    ::protobuf::interface::{{ module.ModuleInterfaceRef.Namespace}}::{{ module.ModuleInterfaceRef.Name}}::{{ de.Name }}ProtoToVaf(deserialized,*ptr);
    this->cached_{{ de_name.replace("::","_") }}_ = vaf::ConstDataPtr<const {{ data_type }}>{std::move(ptr)};

    for(auto& handler_container : registered_{{ de_name.replace("::","_") }}_event_handlers_) {
      if(handler_container.is_active_) {
        handler_container.handler_(cached_{{ de_name.replace("::","_") }}_);
      }
    }
  };
  subscriber_{{ de_name.replace("::","_") }}_= participant_->CreateDataSubscriber("Subscriber_{{ de_name.replace("::","_") }}", pubsubspec_{{ de_name.replace("::","_") }}, receptionHandler_{{ de_name.replace("::","_") }});

  {% endfor %}

  {% for op in module.ModuleInterfaceRef.Operations %}
  {% if module.ModuleInterfaceRef.Namespace != "" %}
  {% set op_name = module.ModuleInterfaceRef.Namespace + "::" + op.Name %}
  {% else %}
  {% set op_name = op.Name %}
  {% endif %}
  SilKit::Services::Rpc::RpcSpec rpcspec_{{ op_name.replace("::","_") }}{"{{ service_interface_name }}_{{ op.Name }}", SilKit::Util::SerDes::MediaTypeRpc()};
  rpcspec_{{ op_name.replace("::","_") }}.AddLabel("Instance", "{{ service_interface_name }}_{{ op.Name }}", SilKit::Services::MatchingLabel::Kind::Mandatory);
  auto ReturnFunc_{{ op_name.replace("::","_") }} = [&](auto* /*client*/, const auto& event) {
    ::vaf::Promise<{{ operation_get_return_type(op, module.ModuleInterfaceRef) }}>*
        promise_pointer = static_cast<
          ::vaf::Promise<{{ operation_get_return_type(op, module.ModuleInterfaceRef) }}>*>(
            event.userContext);
    if (event.callStatus == SilKit::Services::Rpc::RpcCallStatus::Success) {
      SilKit::Util::SerDes::Deserializer deserializer(SilKit::Util::ToStdVector(event.resultData));
      std::vector<std::uint8_t> result_vector = deserializer.Deserialize<std::vector<uint8_t>>();
      {% if has_operation_out_or_inout_parameter(op) %}
      {% set return_type = operation_get_return_type(op, module.ModuleInterfaceRef) %}
      {{ return_type }} output;
      protobuf::interface::{{ module.ModuleInterfaceRef.Namespace }}::{{ module.ModuleInterfaceRef.Name }}::{{ op.Name }}_out deserialized;
      deserialized.ParseFromArray( result_vector.data(), result_vector.size() );
      {% if has_operation_out_or_inout_parameter(op) %}
      ::protobuf::interface::{{ module.ModuleInterfaceRef.Namespace }}::{{ module.ModuleInterfaceRef.Name }}::{{ op.Name }}OutProtoToVaf(deserialized, output);
      {% endif%}
      promise_pointer->set_value(output);
      {% else %}
      promise_pointer->set_value();
      {% endif %}
    } else {
      vaf::Error error_code{::vaf::ErrorCode::kDefaultErrorCode, "Rpc call failed"};
      promise_pointer->SetError(error_code);
    }
    delete promise_pointer;
  };
  rpc_client_{{ op_name.replace("::","_") }}_= participant_->CreateRpcClient("{{ op_name.replace("::","_") }}", rpcspec_{{ op_name.replace("::","_") }}, ReturnFunc_{{ op_name.replace("::","_") }});

  {% endfor %}
  ReportOperational();
}

void {{ module.Name }}::Stop() noexcept {
}

void {{ module.Name }}::DeInit() noexcept {
}

void {{ module.Name }}::StartEventHandlerForModule(const std::string& module) {
  {% for de in module.ModuleInterfaceRef.DataElements %}
  {% set de_name = add_namespace_to_name(de.Name, module.ModuleInterfaceRef.Namespace) %}
  for(auto& handler_container : registered_{{ de_name }}_event_handlers_) {
    if(handler_container.owner_ == module) {
      handler_container.is_active_ = true;
    }
  }
  {% endfor %}
  active_modules_.push_back(module);
}

void {{ module.Name }}::StopEventHandlerForModule(const std::string& module) {
  {% for de in module.ModuleInterfaceRef.DataElements %}
  {% set de_name = add_namespace_to_name(de.Name, module.ModuleInterfaceRef.Namespace) %}
  for(auto& handler_container : registered_{{ de_name }}_event_handlers_) {
    if(handler_container.owner_ == module) {
      handler_container.is_active_ = false;
    }
  }
  {% endfor %}
  static_cast<void>(std::remove(active_modules_.begin(), active_modules_.end(), module));
}

{% for de in module.ModuleInterfaceRef.DataElements %}
{% set data_type = data_type_to_str(de.TypeRef) %}
{% set de_name = add_namespace_to_name(de.Name, module.ModuleInterfaceRef.Namespace) %}

{{ interface.consumer_data_element_get_allocated(de, module.Name ) }} {
  ::vaf::Result<::vaf::ConstDataPtr<const {{ data_type }}>> result_value{
      ::vaf::Error{::vaf::ErrorCode::kNoSampleAvailable, "No sample available"}};
  const std::lock_guard<std::mutex> lock(cached_{{ de_name }}_mutex_);
  if (cached_{{ de_name }}_) {
    result_value = ::vaf::Result<::vaf::ConstDataPtr<const {{ data_type }}>>{cached_{{ de_name }}_};
  }
  return result_value;
}

{{ interface.consumer_data_element_get(de, module.Name ) }} {
  {{ data_type }} return_value{};
  const std::lock_guard<std::mutex> lock(cached_{{ de_name }}_mutex_);
  if (cached_{{ de_name }}_) {
    return_value = *cached_{{ de_name }}_;
  }
  return return_value;
}

{{ interface.consumer_data_element_handler(de, module.Name ) }} {
  registered_{{ de_name }}_event_handlers_.emplace_back(owner, std::move(f));
  if(std::find(active_modules_.begin(), active_modules_.end(), owner) != active_modules_.end()) {
    registered_{{ de_name }}_event_handlers_.back().is_active_ = true;
  }
}

{% endfor %}


{% for op in module.ModuleInterfaceRef.Operations %}
{% if module.ModuleInterfaceRef.Namespace != "" %}
{% set op_name = module.ModuleInterfaceRef.Namespace + "::" + op.Name %}
{% else %}
{% set op_name = op.Name %}
{% endif %}
{{ interface.consumer_operation(op, module.ModuleInterfaceRef, module.Name) }} {
  ::vaf::Future<{{ operation_get_return_type(op, module.ModuleInterfaceRef) }}> return_value;
  ::vaf::Promise<{{ operation_get_return_type(op, module.ModuleInterfaceRef) }}>* promise_pointer =
                  new ::vaf::Promise<{{ operation_get_return_type(op, module.ModuleInterfaceRef) }}>();
  return_value = promise_pointer->get_future();
  protobuf::interface::{{ module.ModuleInterfaceRef.Namespace }}::{{ module.ModuleInterfaceRef.Name }}::{{ op.Name }}_in request;
{% if has_operation_in_or_inout_parameter(op) %}
  protobuf::interface::{{ module.ModuleInterfaceRef.Namespace }}::{{ module.ModuleInterfaceRef.Name }}::{{ op.Name }}InVafToProto({{ get_in_parameter_list_comma_separated(op) }}, request);
{% endif %}
  size_t nbytes = request.ByteSizeLong();
  std::vector<std::uint8_t> serialized(nbytes);
  if (nbytes) {
    request.SerializeToArray(serialized.data(), nbytes);
  }
  SilKit::Util::SerDes::Serializer serializer;
  serializer.Serialize(serialized);

  rpc_client_{{ op_name.replace("::","_") }}_->Call(serializer.ReleaseBuffer(), promise_pointer);

  return return_value;
}
{% endfor %}
{% endblock %}
