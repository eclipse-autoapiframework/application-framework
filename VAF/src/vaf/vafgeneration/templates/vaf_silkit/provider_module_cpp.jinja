{% extends "common/cpp_file_base.jinja" %}
{% import "vaf_interface/macros.jinja" as interface with context %}

{% block includes %}
#include <memory>

#include "vaf/internal/data_ptr_helper.h"
#include "vaf/result.h"
#include "vaf/controller_interface.h"
#include "vaf/error_domain.h"
#include "protobuf/interface/{{ module.ModuleInterfaceRef.Namespace.replace("::","/").lower()}}/{{module.ModuleInterfaceRef.Name.lower()}}/protobuf_transformer.h"
{% endblock %}

{% block content %}
{{ module.Name }}::{{ module.Name }}(vaf::Executor& executor, std::string name, vaf::ExecutableControllerInterface& executable_controller_interface)
  	: vaf::ControlInterface(std::move(name), {}, executable_controller_interface, executor) {
}

vaf::Result<void> {{ module.Name }}::Init() noexcept {
  return vaf::Result<void>{};
}

void {{ module.Name }}::Start() noexcept {
  const auto registry_uri = "{{registry_uri}}";
  const std::string participant_config_text = R"(
  Description: My participant configuration
  Logging:
      Sinks:
      - Type: Stdout
        Level: Info
  )";
  auto config = SilKit::Config::ParticipantConfigurationFromString(participant_config_text);
  {% set participant_name = add_namespace_to_name(module.Name, module.Namespace) %}
  participant_ = SilKit::CreateParticipant(config, "{{ participant_name }}", registry_uri);

  {% for de in module.ModuleInterfaceRef.DataElements %}
  {% set data_type = data_type_to_str(de.TypeRef) %}
  {% set de_name = add_namespace_to_name(de.Name, module.ModuleInterfaceRef.Namespace) %}
  SilKit::Services::PubSub::PubSubSpec pubsubspec_{{ de_name }}{"{{ service_interface_name }}_{{ de.Name }}", SilKit::Util::SerDes::MediaTypeData()};
  pubsubspec_{{ de_name }}.AddLabel("Instance", "{{ service_interface_name }}_{{ de.Name }}", SilKit::Services::MatchingLabel::Kind::Mandatory);
  publisher_{{ de_name.replace("::","_") }}_= participant_->CreateDataPublisher("Publisher_{{ de_name.replace("::","_") }}", pubsubspec_{{ de_name.replace("::","_") }});

  {% endfor %}

  {% for op in module.ModuleInterfaceRef.Operations %}
  {% if module.ModuleInterfaceRef.Namespace != "" %}
  {% set op_name = module.ModuleInterfaceRef.Namespace + "::" + op.Name %}
  {% else %}
  {% set op_name = op.Name %}
  {% endif %}
  SilKit::Services::Rpc::RpcSpec rpcspec_{{ op_name.replace("::","_") }}{"{{ service_interface_name }}_{{ op.Name }}", SilKit::Util::SerDes::MediaTypeRpc()};
  rpcspec_{{ op_name.replace("::","_") }}.AddLabel("Instance", "{{ service_interface_name }}_{{ op.Name }}", SilKit::Services::MatchingLabel::Kind::Mandatory);
  auto RemoteFunc_{{ op_name.replace("::","_") }} = [&](auto* server, const auto& event) {
    SilKit::Util::SerDes::Deserializer deserializer(SilKit::Util::ToStdVector(event.argumentData));
    std::vector<std::uint8_t> argument_vector = deserializer.Deserialize<std::vector<uint8_t>>();

    protobuf::interface::{{ module.ModuleInterfaceRef.Namespace }}::{{ module.ModuleInterfaceRef.Name }}::{{ op.Name }}_in deserialized;
    deserialized.ParseFromArray( argument_vector.data(), argument_vector.size() );
    {% for p in op.Parameters if not is_out_parameter(p) %}
    {% set data_type = data_type_to_str(p.TypeRef) %}
    {{ data_type }} {{ p.Name }}{};
    {% endfor %}
  {% if has_operation_in_or_inout_parameter(op) %}
    protobuf::interface::{{ module.ModuleInterfaceRef.Namespace }}::{{ module.ModuleInterfaceRef.Name }}::{{ op.Name }}InProtoToVaf(deserialized, {{ get_in_parameter_list_comma_separated(op) }});
  {% endif %}
  {% if has_operation_out_or_inout_parameter(op) %}
    {{ operation_get_return_type(op, module.ModuleInterfaceRef) }} result;
  {% endif %}
    if (CbkFunction_{{ op_name.replace("::","_") }}_) {
  {% if has_operation_out_or_inout_parameter(op) %}
      result = CbkFunction_{{ op_name.replace("::","_") }}_(
  {%- for p in op.Parameters if not is_out_parameter(p) -%}
      {{ p.Name }}{% if not loop.last %}, {% endif %}
  {%- endfor -%}
  {% else %}
      CbkFunction_{{ op_name.replace("::","_") }}_(
  {%- for p in op.Parameters if not is_out_parameter(p) -%}
      {{ p.Name }}{% if not loop.last %}, {% endif %}
  {%- endfor -%}
  {%- endif -%}
      );
    }
    protobuf::interface::{{ module.ModuleInterfaceRef.Namespace }}::{{ module.ModuleInterfaceRef.Name }}::{{ op.Name }}_out request;
  {% if has_operation_out_or_inout_parameter(op) %}
    protobuf::interface::{{ module.ModuleInterfaceRef.Namespace }}::{{ module.ModuleInterfaceRef.Name }}::{{ op.Name }}OutVafToProto(result, request);
  {% endif %}
    size_t nbytes = request.ByteSizeLong();
    std::vector<std::uint8_t> serialized(nbytes);
    if (nbytes) {
      request.SerializeToArray(serialized.data(), nbytes);
    }
    SilKit::Util::SerDes::Serializer serializer;
    serializer.Serialize(serialized);
    server->SubmitResult(event.callHandle, serializer.ReleaseBuffer());
  };
  server_{{ op_name.replace("::","_") }}_= participant_->CreateRpcServer("{{ op_name }}", rpcspec_{{ op_name.replace("::","_") }}, RemoteFunc_{{ op_name.replace("::","_") }});

  {% endfor %}
  ReportOperational();
}

void {{ module.Name }}::Stop() noexcept {
}

void {{ module.Name }}::DeInit() noexcept {
}

{% for de in module.ModuleInterfaceRef.DataElements %}
{% set data_type = data_type_to_str(de.TypeRef) %}
{% if module.ModuleInterfaceRef.Namespace != "" %}
{% set de_name = module.ModuleInterfaceRef.Namespace + "::" + de.Name %}
{% else %}
{% set de_name = de.Name %}
{% endif %}
{{ interface.provider_data_element_allocate(de, module.Name ) }} {
  std::unique_ptr< {{ data_type }} > ptr{
      std::make_unique< {{ data_type }} >()};
  return ::vaf::Result<vaf::DataPtr< {{ data_type }} >>::FromValue(std::move(ptr));
}

{{ interface.provider_data_element_set_allocated(de, module.Name) }} {
  {% set data_type_def = get_data_type_definition_of_parameter(de.TypeRef, model) %}
  {% set data_type = data_type_to_str(de.TypeRef) %}
  protobuf::interface::{{ module.ModuleInterfaceRef.Namespace }}::{{ module.ModuleInterfaceRef.Name }}::{{ de.Name }} request;
  protobuf::interface::{{ module.ModuleInterfaceRef.Namespace }}::{{ module.ModuleInterfaceRef.Name }}::{{ de.Name }}VafToProto(*vaf::internal::DataPtrHelper<{{ data_type }}>::getRawPtr(data), request);
  size_t nbytes = request.ByteSizeLong();
  std::vector<std::uint8_t> serialized(nbytes);
  if (nbytes) {
    request.SerializeToArray(serialized.data(), nbytes);
  }
  SilKit::Util::SerDes::Serializer serializer;
  serializer.Serialize(serialized);
  publisher_{{ de_name.replace("::","_") }}_->Publish(serializer.ReleaseBuffer());

  return ::vaf::Result<void>{};
}

{{ interface.provider_data_element_set(de, module.Name) }} {
  {% set data_type_def = get_data_type_definition_of_parameter(de.TypeRef, model) %}
  protobuf::interface::{{ module.ModuleInterfaceRef.Namespace }}::{{ module.ModuleInterfaceRef.Name }}::{{ de.Name }} request;
  protobuf::interface::{{ module.ModuleInterfaceRef.Namespace }}::{{ module.ModuleInterfaceRef.Name }}::{{ de.Name }}VafToProto(data, request);
  size_t nbytes = request.ByteSizeLong();
  std::vector<std::uint8_t> serialized(nbytes);
  if (nbytes) {
    request.SerializeToArray(serialized.data(), nbytes);
  }
  SilKit::Util::SerDes::Serializer serializer;
  serializer.Serialize(serialized);
  publisher_{{ de_name.replace("::","_") }}_->Publish(serializer.ReleaseBuffer());

  return ::vaf::Result<void>{};
}
{% endfor %}

{% for op in module.ModuleInterfaceRef.Operations %}
{% if module.ModuleInterfaceRef.Namespace != "" %}
{% set op_name = module.ModuleInterfaceRef.Namespace + "::" + op.Name %}
{% else %}
{% set op_name = op.Name %}
{% endif %}
{{ interface.provider_operation(op, module.ModuleInterfaceRef, module.Name) }} {
  CbkFunction_{{ op_name.replace("::","_") }}_ = std::move(f);
}

{% endfor %}
{% endblock %}
