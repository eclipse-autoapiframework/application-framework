{% include "common/cmake_copyright.jinja" %}

cmake_minimum_required(VERSION 3.21)

find_package(Threads)
find_package(GTest)

set(TARGET {{ target_name }})

add_library(${TARGET} STATIC "")

target_compile_options(${TARGET}
  PRIVATE
    $<$<AND:$<PLATFORM_ID:Linux>,$<C_COMPILER_ID:GNU>>:-Wall>
    $<$<AND:$<PLATFORM_ID:Linux>,$<C_COMPILER_ID:GNU>>:-Wextra>
    $<$<AND:$<PLATFORM_ID:Linux>,$<C_COMPILER_ID:GNU>>:-Wshadow>
    $<$<AND:$<PLATFORM_ID:Linux>,$<C_COMPILER_ID:GNU>>:-Wnon-virtual-dtor>
    $<$<AND:$<PLATFORM_ID:Linux>,$<C_COMPILER_ID:GNU>>:-Wold-style-cast>
    $<$<AND:$<PLATFORM_ID:Linux>,$<C_COMPILER_ID:GNU>>:-Wcast-align>
    $<$<AND:$<PLATFORM_ID:Linux>,$<C_COMPILER_ID:GNU>>:-Wunused>
    $<$<AND:$<PLATFORM_ID:Linux>,$<C_COMPILER_ID:GNU>>:-Woverloaded-virtual>
    $<$<AND:$<PLATFORM_ID:Linux>,$<C_COMPILER_ID:GNU>>:-pedantic>
    $<$<AND:$<PLATFORM_ID:Linux>,$<C_COMPILER_ID:GNU>>:-Wconversion>
    $<$<AND:$<PLATFORM_ID:Linux>,$<C_COMPILER_ID:GNU>>:-Wsign-conversion>)

target_compile_features(${TARGET} PUBLIC cxx_std_14)

target_compile_definitions(${TARGET} PUBLIC)

target_include_directories(${TARGET}
  PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
    $<INSTALL_INTERFACE:include>
  PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/src)

target_sources(${TARGET}
    PRIVATE
        {% for f in files %}
        ${CMAKE_CURRENT_SOURCE_DIR}/{{f.get_file_path("", ".h")}}
        {% endfor %}
        {% for f in files %}
        ${CMAKE_CURRENT_SOURCE_DIR}/{{f.get_simple_file_path("", ".cpp")}}
        {% endfor %}
    )

# cmake-format: off
target_link_libraries(${TARGET}
  PUBLIC
    Threads::Threads
    $<IF:$<TARGET_EXISTS:vafcpp::vaf_core>,vafcpp::vaf_core,vaf_core>
    vaf_module_interfaces

    {% for lib in libraries %}
    {{ lib }}
    {% endfor %}
)
# cmake-format: on

if(VAF_BUILD_TESTS)
  add_subdirectory(test)
endif()
{# dummy comment for new line at the end #}
