{% extends "common/h_file_base.jinja" %}

{% block includes %}
{% for include in includes%}
{{include}}
{% endfor%}
{% endblock %}

{% block content %}
{% for array in namespace_data.get("Arrays", {}).values() %}
void {{ array.Name }}VafToProto(const ::{{ implicit_data_type_to_str(array.Name, namespace ) }} &in, {{ array.Name }} &out);
void {{ array.Name }}ProtoToVaf(const {{ array.Name }} &in, ::{{ implicit_data_type_to_str(array.Name, namespace) }} &out);
{% endfor %}
{% for vector in namespace_data.get("Vectors", {}).values() %}
void {{ vector.Name }}VafToProto(const ::{{ implicit_data_type_to_str(vector.Name, namespace ) }} &in, {{ vector.Name }} &out);
void {{ vector.Name }}ProtoToVaf(const {{ vector.Name }} &in, ::{{ implicit_data_type_to_str(vector.Name, namespace) }} &out);
{% endfor %}
{% for map_entry in namespace_data.get("Maps", {}).values() %}
void {{ map_entry.Name }}VafToProto(const ::{{ implicit_data_type_to_str(map_entry.Name, namespace ) }} &in, {{ map_entry.Name }} &out);
void {{ map_entry.Name }}ProtoToVaf(const {{ map_entry.Name }} &in, ::{{ implicit_data_type_to_str(map_entry.Name, namespace) }} &out);
{% endfor %}
{% for string in namespace_data.get("Strings", {}).values() %}
void {{ string.Name }}VafToProto(const ::{{ implicit_data_type_to_str(string.Name, namespace ) }} &in, {{ string.Name }} &out);
void {{ string.Name }}ProtoToVaf(const {{ string.Name }} &in, ::{{ implicit_data_type_to_str(string.Name, namespace) }} &out);
{% endfor %}
{% for enum in namespace_data.get("Enums", {}).values() %}
void {{ enum.Name }}VafToProto(const ::{{ implicit_data_type_to_str(enum.Name, namespace ) }} &in, {{ enum.Name }} &out);
void {{ enum.Name }}ProtoToVaf(const {{ enum.Name }} &in, ::{{ implicit_data_type_to_str(enum.Name, namespace) }} &out);
{% endfor %}
{% for struct in namespace_data.get("Structs", {}).values() %}
void {{ struct.Name }}VafToProto(const ::{{ implicit_data_type_to_str(struct.Name, namespace ) }} &in, {{ struct.Name }} &out);
void {{ struct.Name }}ProtoToVaf(const {{ struct.Name }} &in, ::{{ implicit_data_type_to_str(struct.Name, namespace) }} &out);
{% endfor %}
{% for type_ref in namespace_data.get("TypeRefs", {}).values() %}
void {{ type_ref.Name }}VafToProto(const ::{{ implicit_data_type_to_str(type_ref.Name, namespace ) }} &in, {{ type_ref.Name }} &out);
void {{ type_ref.Name }}ProtoToVaf(const {{ type_ref.Name }} &in, ::{{ implicit_data_type_to_str(type_ref.Name, namespace) }} &out);
{% endfor %}
{% for array in namespace_data.get("Arrays", {}).values() %}
inline void {{ array.Name }}VafToProto(const ::{{ implicit_data_type_to_str(array.Name, namespace ) }} &in, {{ array.Name }} &out) {
  out.Clear();
  for (int i=0;i<in.size();i++) {
{% if not is_data_type_base_type(array.TypeRef.Name, array.TypeRef.Namespace) and not is_data_type_cstdint_type(array.TypeRef.Name, array.TypeRef.Namespace)%}
    ::protobuf::{{array.TypeRef.Namespace}}::{{array.TypeRef.Name}} element_out{};
    ::protobuf::{{array.TypeRef.Namespace}}::{{array.TypeRef.Name}}VafToProto(in[i], element_out);
    out.mutable_vaf_value_internal()->Add(std::move(element_out));
{% else %}
    out.mutable_vaf_value_internal()->Add(in[i]);
{% endif %}
  }
}
inline void {{ array.Name }}ProtoToVaf(const {{ array.Name }} &in, ::{{ implicit_data_type_to_str(array.Name, namespace) }} &out) {
  for (int i=0;i<out.size();i++) {
{% if not is_data_type_base_type(array.TypeRef.Name, array.TypeRef.Namespace) and not is_data_type_cstdint_type(array.TypeRef.Name, array.TypeRef.Namespace)%}
    ::protobuf::{{array.TypeRef.Namespace}}::{{array.TypeRef.Name}}ProtoToVaf(in.vaf_value_internal()[i], out[i]);
{% else %}
    out[i]=in.vaf_value_internal()[i];
{% endif %}
  }
}
{% endfor %}
{% for vector in namespace_data.get("Vectors", {}).values() %}
inline void {{ vector.Name }}VafToProto(const ::{{ implicit_data_type_to_str(vector.Name, namespace ) }} &in, {{ vector.Name }} &out) {
  out.Clear();
  for (auto element_in :in) {
{% if not is_data_type_base_type(vector.TypeRef.Name, vector.TypeRef.Namespace) and not is_data_type_cstdint_type(vector.TypeRef.Name, vector.TypeRef.Namespace)%}
    ::protobuf::{{vector.TypeRef.Namespace}}::{{vector.TypeRef.Name}} element_out{};
    ::protobuf::{{vector.TypeRef.Namespace}}::{{vector.TypeRef.Name}}VafToProto(element_in, element_out);
      out.mutable_vaf_value_internal()->Add(std::move(element_out));
{% else %}
      out.mutable_vaf_value_internal()->Add(element_in);
{% endif %}
  }
}
inline void {{ vector.Name }}ProtoToVaf(const {{ vector.Name }} &in, ::{{ implicit_data_type_to_str(vector.Name, namespace) }} &out) {
  out.clear();
  for (auto element_in :in.vaf_value_internal()) {
{% if not is_data_type_base_type(vector.TypeRef.Name, vector.TypeRef.Namespace) and not is_data_type_cstdint_type(vector.TypeRef.Name, vector.TypeRef.Namespace)%}
    ::{{vector.TypeRef.Namespace}}::{{vector.TypeRef.Name}} element_out{};
    ::protobuf::{{vector.TypeRef.Namespace}}::{{vector.TypeRef.Name}}ProtoToVaf(element_in, element_out);
    out.push_back(std::move(element_out));
{% else %}
    out.push_back(element_in);
{% endif %}
  }
}
{% endfor %}
{% for map_entry in namespace_data.get("Maps", {}).values() %}
inline void {{ map_entry.Name }}EntryVafToProto(const {% if not is_data_type_base_type(map_entry.MapKeyTypeRef.Name, map_entry.MapKeyTypeRef.Namespace) %}::{% endif %}{{ implicit_data_type_to_str(map_entry.MapKeyTypeRef.Name, map_entry.MapKeyTypeRef.Namespace ) }} &in_key, {% if not is_data_type_base_type(map_entry.MapValueTypeRef.Name, map_entry.MapValueTypeRef.Namespace) %}::{% endif %}{{ implicit_data_type_to_str(map_entry.MapValueTypeRef.Name, map_entry.MapValueTypeRef.Namespace ) }} &in_value,  {{ map_entry.Name }}Entry &out) {
{% if not is_data_type_base_type(map_entry.MapKeyTypeRef.Name, map_entry.MapKeyTypeRef.Namespace) and not is_data_type_cstdint_type(map_entry.MapKeyTypeRef.Name, map_entry.MapKeyTypeRef.Namespace)%}
  ::protobuf::{{map_entry.MapKeyTypeRef.Namespace}}::{{map_entry.MapKeyTypeRef.Name}}VafToProto(in_key, *out.mutable_vaf_key_internal());
{% else %}
  out.set_vaf_key_internal(in_key);
{% endif %}
{% if not is_data_type_base_type(map_entry.MapValueTypeRef.Name, map_entry.MapValueTypeRef.Namespace) and not is_data_type_cstdint_type(map_entry.MapValueTypeRef.Name, map_entry.MapValueTypeRef.Namespace)%}
  ::protobuf::{{map_entry.MapValueTypeRef.Namespace}}::{{map_entry.MapValueTypeRef.Name}}VafToProto(in_value, *out.mutable_vaf_value_internal());
{% else %}
  out.set_vaf_value_internal(in_value);
{% endif %}
}
inline void {{ map_entry.Name }}EntryProtoToVaf(const {{ map_entry.Name }}Entry &in, {% if not is_data_type_base_type(map_entry.MapKeyTypeRef.Name, map_entry.MapKeyTypeRef.Namespace) %}::{% endif %}{{ implicit_data_type_to_str(map_entry.MapKeyTypeRef.Name, map_entry.MapKeyTypeRef.Namespace ) }} &out_key, {% if not is_data_type_base_type(map_entry.MapValueTypeRef.Name, map_entry.MapValueTypeRef.Namespace) %}::{% endif %}{{ implicit_data_type_to_str(map_entry.MapValueTypeRef.Name, map_entry.MapValueTypeRef.Namespace ) }} &out_value) {
{% if not is_data_type_base_type(map_entry.MapKeyTypeRef.Name, map_entry.MapKeyTypeRef.Namespace) and not is_data_type_cstdint_type(map_entry.MapKeyTypeRef.Name, map_entry.MapKeyTypeRef.Namespace)%}
  ::protobuf::{{map_entry.MapKeyTypeRef.Namespace}}::{{map_entry.MapKeyTypeRef.Name}}ProtoToVaf(in.vaf_key_internal(), out_key);
{% else %}
  out_key = in.vaf_key_internal();
{% endif %}
{% if not is_data_type_base_type(map_entry.MapValueTypeRef.Name, map_entry.MapValueTypeRef.Namespace) and not is_data_type_cstdint_type(map_entry.MapValueTypeRef.Name, map_entry.MapValueTypeRef.Namespace)%}
  ::protobuf::{{map_entry.MapValueTypeRef.Namespace}}::{{map_entry.MapValueTypeRef.Name}}ProtoToVaf(in.vaf_value_internal(), out_value);
{% else %}
  out_value = in.vaf_value_internal();
{% endif %}
}
inline void {{ map_entry.Name }}VafToProto(const ::{{ implicit_data_type_to_str(map_entry.Name, namespace ) }} &in, {{ map_entry.Name }} &out) {
  out.Clear();
  for (auto in_entry: in) {
    {{ map_entry.Name }}Entry out_entry{};
    {{ map_entry.Name }}EntryVafToProto(in_entry.first, in_entry.second, out_entry);
    out.mutable_vaf_entry_internal()->Add(std::move(out_entry));
  }
}
inline void {{ map_entry.Name }}ProtoToVaf(const {{ map_entry.Name }} &in, ::{{ implicit_data_type_to_str(map_entry.Name, namespace) }} &out) {
  out.clear();
  for (auto in_entry: in.vaf_entry_internal()) {
    std::pair<{% if not is_data_type_base_type(map_entry.MapKeyTypeRef.Name, map_entry.MapKeyTypeRef.Namespace) %}::{% endif %}{{ implicit_data_type_to_str(map_entry.MapKeyTypeRef.Name, map_entry.MapKeyTypeRef.Namespace ) }}, {% if not is_data_type_base_type(map_entry.MapValueTypeRef.Name, map_entry.MapValueTypeRef.Namespace) %}::{% endif %}{{ implicit_data_type_to_str(map_entry.MapValueTypeRef.Name, map_entry.MapValueTypeRef.Namespace ) }}> out_entry{};
    {{ map_entry.Name }}EntryProtoToVaf(in_entry, out_entry.first, out_entry.second);
    out.insert(std::move(out_entry));
  }
}
{% endfor %}
{% for string in namespace_data.get("Strings", {}).values() %}
inline void {{ string.Name }}VafToProto(const ::{{ implicit_data_type_to_str(string.Name, namespace ) }} &in, {{ string.Name }} &out) {
    (*out.mutable_vaf_value_internal()) = in.c_str();
}
inline void {{ string.Name }}ProtoToVaf(const {{ string.Name }} &in, ::{{ implicit_data_type_to_str(string.Name, namespace) }} &out) {
    out = in.vaf_value_internal();
}
{% endfor %}
{% for enum in namespace_data.get("Enums", {}).values() %}
inline void {{ enum.Name }}VafToProto(const ::{{ implicit_data_type_to_str(enum.Name, namespace ) }} &in, {{ enum.Name }} &out) {
    out.set_vaf_value_internal(static_cast<typename std::underlying_type<::{{ implicit_data_type_to_str(enum.Name, namespace ) }}>::type>(in));
}
inline void {{ enum.Name }}ProtoToVaf(const {{ enum.Name }} &in, ::{{ implicit_data_type_to_str(enum.Name, namespace) }} &out) {
  out = static_cast<::{{ implicit_data_type_to_str(enum.Name, namespace ) }}>(in.vaf_value_internal());
}
{% endfor %}
{% for struct in namespace_data.get("Structs", {}).values() %}
inline void {{ struct.Name }}VafToProto(const ::{{ implicit_data_type_to_str(struct.Name, namespace ) }} &in, {{ struct.Name }} &out) {
{% for sub_element in struct.SubElements %}
{% if not is_data_type_base_type(sub_element.TypeRef.Name, sub_element.TypeRef.Namespace) and not is_data_type_cstdint_type(sub_element.TypeRef.Name, sub_element.TypeRef.Namespace)%}
  ::protobuf::{{sub_element.TypeRef.Namespace}}::{{sub_element.TypeRef.Name}}VafToProto(in.{{sub_element.Name}}, *out.mutable_{{sub_element.Name.lower()}}());
{% else %}
  out.set_{{sub_element.Name.lower()}}(in.{{sub_element.Name}});
{% endif %}
{% endfor%}
}
inline void {{ struct.Name }}ProtoToVaf(const {{ struct.Name }} &in, ::{{ implicit_data_type_to_str(struct.Name, namespace) }} &out) {
{% for sub_element in struct.SubElements %}
{% if not is_data_type_base_type(sub_element.TypeRef.Name, sub_element.TypeRef.Namespace) and not is_data_type_cstdint_type(sub_element.TypeRef.Name, sub_element.TypeRef.Namespace)%}
  ::protobuf::{{sub_element.TypeRef.Namespace}}::{{sub_element.TypeRef.Name}}ProtoToVaf(in.{{sub_element.Name.lower()}}(), out.{{sub_element.Name}});
{% else %}
  out.{{sub_element.Name}} = in.{{sub_element.Name.lower()}}();
{% endif %}
{% endfor%}
}
{% endfor %}
{% for type_ref in namespace_data.get("TypeRefs", {}).values() %}
inline void {{ type_ref.Name }}VafToProto(const ::{{ implicit_data_type_to_str(type_ref.Name, namespace ) }} &in, {{ type_ref.Name }} &out) {
{% if not is_data_type_base_type(type_ref.TypeRef.Name, type_ref.TypeRef.Namespace) and not is_data_type_cstdint_type(type_ref.TypeRef.Name, type_ref.TypeRef.Namespace)%}
  {{type_ref.TypeRef.Namespace}}::{{type_ref.TypeRef.Name}}VafToProto(in, *out.mutable_vaf_value_internal());
{% else %}
  out.set_vaf_value_internal(in);
{% endif %}
}
inline void {{ type_ref.Name }}ProtoToVaf(const {{ type_ref.Name }} &in, ::{{ implicit_data_type_to_str(type_ref.Name, namespace) }} &out) {
{% if not is_data_type_base_type(type_ref.TypeRef.Name, type_ref.TypeRef.Namespace) and not is_data_type_cstdint_type(type_ref.TypeRef.Name, type_ref.TypeRef.Namespace)%}
  {{type_ref.TypeRef.Namespace}}::{{type_ref.TypeRef.Name}}ProtoToVaf(in.vaf_value_internal(), out);
{% else %}
  out = in.vaf_value_internal();
{% endif %}
}
{% endfor %}
{% endblock %}
