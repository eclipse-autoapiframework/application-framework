from datetime import timedelta

from .application_modules import *
from vaf import *

# TODO: Import the CaC support depending on your middleware to have access to platform interfaces, modules, and executables

# TODO: Create executable instances (or configure existing ones from the platform configuration)
# executable = Executable("ExecutableName", timedelta(milliseconds=10))

# TODO: Add application modules to executable instances
# executable.add_application_module(AppModule1, [(Instances.AppModule1.Tasks.PeriodicTask, timedelta(milliseconds=1), 0)])
# executable.add_application_module(AppModule2, [(Instances.AppModule2.Tasks.PeriodicTask, timedelta(milliseconds=1), 1)])

# TODO: Wire the internal application module instances
# executable.connect_interfaces(AppModule1, Instances.AppModule1.ProvidedInterfaces.MyInternalProvider,
#                               AppModule2, Instances.AppModule2.ConsumedInterfaces.MyInternalConsumer)

# TODO: Connect application modules with platform or platform modules (lower layer abstraction modules)
# executable.connect_consumed_interface_to_platform(AppModule1, Instances.AppModule1.ConsumedInterfaces.MyExternalConsumer,
#                                                   SomeExecutable.ConsumerModules.ExternalConsumer)
# executable.connect_provided_interface_to_platform(AppModule2, Instances.AppModule2.ProvidedInterfaces.MyExternalProvider,
#                                                   SomeExecutable.ProviderModules.ExternalProvider)
